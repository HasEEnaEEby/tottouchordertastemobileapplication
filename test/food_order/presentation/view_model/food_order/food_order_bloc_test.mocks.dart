// Mocks generated by Mockito 5.4.5 from annotations
// in tottouchordertastemobileapplication/test/food_order/presentation/view_model/food_order/food_order_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tottouchordertastemobileapplication/core/errors/failures.dart'
    as _i5;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/order_entity.dart'
    as _i7;
import 'package:tottouchordertastemobileapplication/food_order/domain/entity/bill_entity.dart'
    as _i8;
import 'package:tottouchordertastemobileapplication/food_order/domain/entity/food_order_entity.dart'
    as _i6;
import 'package:tottouchordertastemobileapplication/food_order/domain/repository/food_order_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoodOrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodOrderRepository extends _i1.Mock
    implements _i3.FoodOrderRepository {
  MockFoodOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.FoodOrderEntity>>>
      fetchUserOrders() => (super.noSuchMethod(
            Invocation.method(
              #fetchUserOrders,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.FoodOrderEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.FoodOrderEntity>>(
              this,
              Invocation.method(
                #fetchUserOrders,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.FoodOrderEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> getOrderDetails(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderDetails,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #getOrderDetails,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> getOrderById(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> cancelOrder(
    String? orderId, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
          {#reason: reason},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
            {#reason: reason},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> trackOrderUpdates(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackOrderUpdates,
          [orderId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  void stopTrackingOrder(String? orderId) => super.noSuchMethod(
        Invocation.method(
          #stopTrackingOrder,
          [orderId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> placeOrder(
          _i7.OrderRequestEntity? orderRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #placeOrder,
          [orderRequest],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #placeOrder,
            [orderRequest],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> requestBill(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestBill,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #requestBill,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.BillEntity>> getOrderBill(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderBill,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.BillEntity>>.value(
            _FakeEither_0<_i5.Failure, _i8.BillEntity>(
          this,
          Invocation.method(
            #getOrderBill,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.BillEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>> updatePaymentStatus(
    String? orderId,
    String? paymentStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePaymentStatus,
          [
            orderId,
            paymentStatus,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.FoodOrderEntity>(
          this,
          Invocation.method(
            #updatePaymentStatus,
            [
              orderId,
              paymentStatus,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FoodOrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> rateOrder(
    String? orderId,
    int? rating, {
    String? feedback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rateOrder,
          [
            orderId,
            rating,
          ],
          {#feedback: feedback},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #rateOrder,
            [
              orderId,
              rating,
            ],
            {#feedback: feedback},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
