// Mocks generated by Mockito 5.4.5 from annotations
// in tottouchordertastemobileapplication/test/features/customer_dashboard/domain/use_case/customer_dashboard_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tottouchordertastemobileapplication/core/errors/failures.dart'
    as _i5;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/menu_item_entity.dart'
    as _i7;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/order_entity.dart'
    as _i10;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/restaurant_entity.dart'
    as _i6;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/table_entity.dart'
    as _i8;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/customer_dashboard_repository.dart'
    as _i3;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/order_repository.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CustomerDashboardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerDashboardRepository extends _i1.Mock
    implements _i3.CustomerDashboardRepository {
  MockCustomerDashboardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>
      getAllRestaurants() => (super.noSuchMethod(
            Invocation.method(
              #getAllRestaurants,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RestaurantEntity>>(
              this,
              Invocation.method(
                #getAllRestaurants,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.RestaurantEntity>>
      getRestaurantDetails(String? restaurantId) => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantDetails,
              [restaurantId],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.RestaurantEntity>>.value(
                    _FakeEither_0<_i5.Failure, _i6.RestaurantEntity>(
              this,
              Invocation.method(
                #getRestaurantDetails,
                [restaurantId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.RestaurantEntity>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i7.MenuItemEntity>>> getRestaurantMenu(
          String? restaurantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantMenu,
          [restaurantId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.MenuItemEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.MenuItemEntity>>(
          this,
          Invocation.method(
            #getRestaurantMenu,
            [restaurantId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.MenuItemEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.TableEntity>>>
      getRestaurantTables(String? restaurantId) => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantTables,
              [restaurantId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i8.TableEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.TableEntity>>(
              this,
              Invocation.method(
                #getRestaurantTables,
                [restaurantId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.TableEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.TableEntity>> getTableDetails(
          String? tableId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTableDetails,
          [tableId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.TableEntity>>.value(
            _FakeEither_0<_i5.Failure, _i8.TableEntity>(
          this,
          Invocation.method(
            #getTableDetails,
            [tableId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.TableEntity>>);
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i9.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>> placeOrder(
          _i10.OrderRequestEntity? orderRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #placeOrder,
          [orderRequest],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i10.OrderEntity>(
          this,
          Invocation.method(
            #placeOrder,
            [orderRequest],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.OrderEntity>>>
      getCustomerOrders() => (super.noSuchMethod(
            Invocation.method(
              #getCustomerOrders,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i10.OrderEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i10.OrderEntity>>(
              this,
              Invocation.method(
                #getCustomerOrders,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.OrderEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>> getOrderById(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i10.OrderEntity>(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> getOrderStatus(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderStatus,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #getOrderStatus,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> cancelOrder(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>> addItemsToOrder(
    String? orderId,
    List<_i10.OrderItemEntity>? items,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItemsToOrder,
          [
            orderId,
            items,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i10.OrderEntity>(
          this,
          Invocation.method(
            #addItemsToOrder,
            [
              orderId,
              items,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>> requestBill(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestBill,
          [orderId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i10.OrderEntity>(
          this,
          Invocation.method(
            #requestBill,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.OrderEntity>>);
}
