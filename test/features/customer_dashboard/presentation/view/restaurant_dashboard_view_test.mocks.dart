// Mocks generated by Mockito 5.4.5 from annotations
// in tottouchordertastemobileapplication/test/features/customer_dashboard/presentation/view/restaurant_dashboard_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/table_repository.dart'
    as _i3;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/use_case/customer_dashboard_usecases.dart'
    as _i2;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/presentation/view_model/customer_dashboard/customer_dashboard_bloc.dart'
    as _i5;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/presentation/view_model/customer_dashboard/customer_dashboard_event.dart'
    as _i7;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/presentation/view_model/customer_dashboard/customer_dashboard_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllRestaurantsUseCase_0 extends _i1.SmartFake
    implements _i2.GetAllRestaurantsUseCase {
  _FakeGetAllRestaurantsUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRestaurantDetailsUseCase_1 extends _i1.SmartFake
    implements _i2.GetRestaurantDetailsUseCase {
  _FakeGetRestaurantDetailsUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRestaurantMenuUseCase_2 extends _i1.SmartFake
    implements _i2.GetRestaurantMenuUseCase {
  _FakeGetRestaurantMenuUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRestaurantTablesUseCase_3 extends _i1.SmartFake
    implements _i2.GetRestaurantTablesUseCase {
  _FakeGetRestaurantTablesUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaceOrderUseCase_4 extends _i1.SmartFake
    implements _i2.PlaceOrderUseCase {
  _FakePlaceOrderUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTableRepository_5 extends _i1.SmartFake
    implements _i3.TableRepository {
  _FakeTableRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomerDashboardState_6 extends _i1.SmartFake
    implements _i4.CustomerDashboardState {
  _FakeCustomerDashboardState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CustomerDashboardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerDashboardBloc extends _i1.Mock
    implements _i5.CustomerDashboardBloc {
  @override
  _i2.GetAllRestaurantsUseCase get getAllRestaurantsUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getAllRestaurantsUseCase),
        returnValue: _FakeGetAllRestaurantsUseCase_0(
          this,
          Invocation.getter(#getAllRestaurantsUseCase),
        ),
        returnValueForMissingStub: _FakeGetAllRestaurantsUseCase_0(
          this,
          Invocation.getter(#getAllRestaurantsUseCase),
        ),
      ) as _i2.GetAllRestaurantsUseCase);

  @override
  _i2.GetRestaurantDetailsUseCase get getRestaurantDetailsUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getRestaurantDetailsUseCase),
        returnValue: _FakeGetRestaurantDetailsUseCase_1(
          this,
          Invocation.getter(#getRestaurantDetailsUseCase),
        ),
        returnValueForMissingStub: _FakeGetRestaurantDetailsUseCase_1(
          this,
          Invocation.getter(#getRestaurantDetailsUseCase),
        ),
      ) as _i2.GetRestaurantDetailsUseCase);

  @override
  _i2.GetRestaurantMenuUseCase get getRestaurantMenuUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getRestaurantMenuUseCase),
        returnValue: _FakeGetRestaurantMenuUseCase_2(
          this,
          Invocation.getter(#getRestaurantMenuUseCase),
        ),
        returnValueForMissingStub: _FakeGetRestaurantMenuUseCase_2(
          this,
          Invocation.getter(#getRestaurantMenuUseCase),
        ),
      ) as _i2.GetRestaurantMenuUseCase);

  @override
  _i2.GetRestaurantTablesUseCase get getRestaurantTablesUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getRestaurantTablesUseCase),
        returnValue: _FakeGetRestaurantTablesUseCase_3(
          this,
          Invocation.getter(#getRestaurantTablesUseCase),
        ),
        returnValueForMissingStub: _FakeGetRestaurantTablesUseCase_3(
          this,
          Invocation.getter(#getRestaurantTablesUseCase),
        ),
      ) as _i2.GetRestaurantTablesUseCase);

  @override
  _i2.PlaceOrderUseCase get placeOrderUseCase => (super.noSuchMethod(
        Invocation.getter(#placeOrderUseCase),
        returnValue: _FakePlaceOrderUseCase_4(
          this,
          Invocation.getter(#placeOrderUseCase),
        ),
        returnValueForMissingStub: _FakePlaceOrderUseCase_4(
          this,
          Invocation.getter(#placeOrderUseCase),
        ),
      ) as _i2.PlaceOrderUseCase);

  @override
  _i3.TableRepository get tableRepository => (super.noSuchMethod(
        Invocation.getter(#tableRepository),
        returnValue: _FakeTableRepository_5(
          this,
          Invocation.getter(#tableRepository),
        ),
        returnValueForMissingStub: _FakeTableRepository_5(
          this,
          Invocation.getter(#tableRepository),
        ),
      ) as _i3.TableRepository);

  @override
  _i4.CustomerDashboardState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCustomerDashboardState_6(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCustomerDashboardState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.CustomerDashboardState);

  @override
  _i6.Stream<_i4.CustomerDashboardState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.CustomerDashboardState>.empty(),
        returnValueForMissingStub:
            _i6.Stream<_i4.CustomerDashboardState>.empty(),
      ) as _i6.Stream<_i4.CustomerDashboardState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void add(_i7.CustomerDashboardEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.CustomerDashboardEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.CustomerDashboardState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.CustomerDashboardEvent>(
    _i8.EventHandler<E, _i4.CustomerDashboardState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i7.CustomerDashboardEvent,
                  _i4.CustomerDashboardState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i4.CustomerDashboardState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
