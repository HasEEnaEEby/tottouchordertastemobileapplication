// Mocks generated by Mockito 5.4.5 from annotations
// in tottouchordertastemobileapplication/test/features/customer_dashboard/presentation/view_model/customer_dashboard/customer_dashboard_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tottouchordertastemobileapplication/core/auth/auth_token_manager.dart'
    as _i12;
import 'package:tottouchordertastemobileapplication/core/errors/failures.dart'
    as _i7;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/data/model/table_validation_model.dart'
    as _i14;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/menu_item_entity.dart'
    as _i9;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/order_entity.dart'
    as _i11;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/restaurant_entity.dart'
    as _i8;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/entity/table_entity.dart'
    as _i10;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/customer_dashboard_repository.dart'
    as _i2;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/order_repository.dart'
    as _i4;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/repository/table_repository.dart'
    as _i13;
import 'package:tottouchordertastemobileapplication/features/customer_dashboard/domain/use_case/customer_dashboard_usecases.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomerDashboardRepository_0 extends _i1.SmartFake
    implements _i2.CustomerDashboardRepository {
  _FakeCustomerDashboardRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrderRepository_2 extends _i1.SmartFake
    implements _i4.OrderRepository {
  _FakeOrderRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllRestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllRestaurantsUseCase extends _i1.Mock
    implements _i5.GetAllRestaurantsUseCase {
  MockGetAllRestaurantsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerDashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerDashboardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerDashboardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.RestaurantEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6
            .Future<_i3.Either<_i7.Failure, List<_i8.RestaurantEntity>>>.value(
            _FakeEither_1<_i7.Failure, List<_i8.RestaurantEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.RestaurantEntity>>>);
}

/// A class which mocks [GetRestaurantDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantDetailsUseCase extends _i1.Mock
    implements _i5.GetRestaurantDetailsUseCase {
  MockGetRestaurantDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerDashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerDashboardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerDashboardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.RestaurantEntity>> call(
          String? restaurantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [restaurantId],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i8.RestaurantEntity>>.value(
                _FakeEither_1<_i7.Failure, _i8.RestaurantEntity>(
          this,
          Invocation.method(
            #call,
            [restaurantId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.RestaurantEntity>>);
}

/// A class which mocks [GetRestaurantMenuUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantMenuUseCase extends _i1.Mock
    implements _i5.GetRestaurantMenuUseCase {
  MockGetRestaurantMenuUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerDashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerDashboardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerDashboardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i9.MenuItemEntity>>> call(
          String? restaurantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [restaurantId],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i9.MenuItemEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i9.MenuItemEntity>>(
          this,
          Invocation.method(
            #call,
            [restaurantId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i9.MenuItemEntity>>>);
}

/// A class which mocks [GetRestaurantTablesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantTablesUseCase extends _i1.Mock
    implements _i5.GetRestaurantTablesUseCase {
  MockGetRestaurantTablesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerDashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerDashboardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerDashboardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>> call(
          String? restaurantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [restaurantId],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.TableEntity>>(
          this,
          Invocation.method(
            #call,
            [restaurantId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>);
}

/// A class which mocks [PlaceOrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaceOrderUseCase extends _i1.Mock implements _i5.PlaceOrderUseCase {
  MockPlaceOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.OrderRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeOrderRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.OrderRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i11.OrderEntity>> call(
          _i11.OrderRequestEntity? orderRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [orderRequest],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i11.OrderEntity>>.value(
                _FakeEither_1<_i7.Failure, _i11.OrderEntity>(
          this,
          Invocation.method(
            #call,
            [orderRequest],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i11.OrderEntity>>);
}

/// A class which mocks [AuthTokenManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthTokenManager extends _i1.Mock implements _i12.AuthTokenManager {
  MockAuthTokenManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveAuthData({
    required String? token,
    required String? refreshToken,
    required Map<String, dynamic>? userData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAuthData,
          [],
          {
            #token: token,
            #refreshToken: refreshToken,
            #userData: userData,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool isEmailVerified() => (super.noSuchMethod(
        Invocation.method(
          #isEmailVerified,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool willTokenExpireSoon() => (super.noSuchMethod(
        Invocation.method(
          #willTokenExpireSoon,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  T? getUserDataField<T>(String? key) => (super.noSuchMethod(Invocation.method(
        #getUserDataField,
        [key],
      )) as T?);

  @override
  _i6.Future<void> clearAuthData() => (super.noSuchMethod(
        Invocation.method(
          #clearAuthData,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool hasValidToken() => (super.noSuchMethod(
        Invocation.method(
          #hasValidToken,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> updateTokensAfterRefresh(
    String? newToken,
    String? newRefreshToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTokensAfterRefresh,
          [
            newToken,
            newRefreshToken,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateEmailVerificationStatus(bool? isVerified) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEmailVerificationStatus,
          [isVerified],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [TableRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTableRepository extends _i1.Mock implements _i13.TableRepository {
  MockTableRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>
      getRestaurantTables(String? restaurantId) => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantTables,
              [restaurantId],
            ),
            returnValue: _i6
                .Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.TableEntity>>(
              this,
              Invocation.method(
                #getRestaurantTables,
                [restaurantId],
              ),
            )),
          ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>
      getAvailableTables(String? restaurantId) => (super.noSuchMethod(
            Invocation.method(
              #getAvailableTables,
              [restaurantId],
            ),
            returnValue: _i6
                .Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.TableEntity>>(
              this,
              Invocation.method(
                #getAvailableTables,
                [restaurantId],
              ),
            )),
          ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.TableEntity>>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i10.TableEntity>> getTableById(
          String? tableId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTableById,
          [tableId],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i10.TableEntity>>.value(
                _FakeEither_1<_i7.Failure, _i10.TableEntity>(
          this,
          Invocation.method(
            #getTableById,
            [tableId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i10.TableEntity>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i14.TableValidationModel>>
      validateTableQR(
    String? restaurantId,
    String? qrData,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #validateTableQR,
              [
                restaurantId,
                qrData,
              ],
            ),
            returnValue: _i6.Future<
                    _i3.Either<_i7.Failure, _i14.TableValidationModel>>.value(
                _FakeEither_1<_i7.Failure, _i14.TableValidationModel>(
              this,
              Invocation.method(
                #validateTableQR,
                [
                  restaurantId,
                  qrData,
                ],
              ),
            )),
          ) as _i6.Future<_i3.Either<_i7.Failure, _i14.TableValidationModel>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> requestTable(
    String? tableId,
    String? sessionToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestTable,
          [
            tableId,
            sessionToken,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #requestTable,
            [
              tableId,
              sessionToken,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
